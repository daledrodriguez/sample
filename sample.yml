# security_hardening_playbook.yml

---
- name: Automated Security Hardening
  hosts: localhost
  become: yes
  tasks:
    # Task 1: Configure firewall rules using ufw
    - name: Configure firewall rules
      apt:
        name: ufw
        state: present

    - name: Allow SSH through firewall
      command: ufw allow ssh

    - name: Allow HTTP through firewall
      command: ufw allow http

    - name: Allow HTTPS through firewall
      command: ufw allow https

    - name: Enable firewall
      command: ufw --force enable

    # Task 3: Install apparmor-utils and Nginx, and create custom AppArmor profile
    - name: Install apparmor-utils
      apt:
        name: apparmor-utils
        state: present

    - name: Install Nginx
      apt:
        name: nginx
        state: present

    - name: Create custom AppArmor profile for Nginx
      shell: |
        cat << 'EOF' | sudo tee /etc/apparmor.d/usr.sbin.nginx
        #include <tunables/global>
        /usr/sbin/nginx {
          #include <abstractions/apache2-common>
          #include <abstractions/base>
          #include <abstractions/nis>
          #include <abstractions/web-data>
          capability dac_override,
          capability dac_read_search,
          capability net_bind_service,
          capability setgid,
          capability setuid,
        
          deny /var/www/html/forbidden/* r,
        
          /etc/group r,
          /etc/nginx/conf.d/ r,
          /etc/nginx/mime.types r,
          /etc/nginx/nginx.conf r,
          /etc/nsswitch.conf r,
          /etc/passwd r,
          /etc/ssl/openssl.cnf r,
          /run/nginx.pid rw,
          /usr/sbin/nginx mr,
          /var/log/nginx/access.log w,
          /var/log/nginx/error.log w,
          owner /etc/nginx/modules-enabled/ r,
          owner /etc/nginx/sites-available/default r,
          owner /etc/nginx/sites-enabled/ r,
          owner /usr/share/nginx/modules-available/mod-http-geoip.conf r,
          owner /usr/share/nginx/modules-available/mod-http-image-filter.conf r,
          owner /usr/share/nginx/modules-available/mod-http-xslt-filter.conf r,
          owner /usr/share/nginx/modules-available/mod-mail.conf r,
          owner /usr/share/nginx/modules-available/mod-stream-geoip.conf r,
          owner /usr/share/nginx/modules-available/mod-stream.conf r,
        }
        EOF
      args:
        warn: false

    - name: Create forbidden directory
      file:
        path: /var/www/html/forbidden
        state: directory
        mode: '0755'

    - name: Create index.html file in forbidden directory
      copy:
        content: "<h1>This is forbidden.</h1>"
        dest: /var/www/html/forbidden/index.html

    - name: Load and enforce the AppArmor profile for Nginx
      shell: |
        sudo apparmor_parser -r /etc/apparmor.d/usr.sbin.nginx
        sudo aa-enforce /usr/sbin/nginx

    - name: Restart Nginx service
      service:
        name: nginx
        state: restarted

    # Task 4: Apply operating system security patches
    - name: Apply operating system security patches
      apt:
        update_cache: yes
        upgrade: dist
      become: yes

- name: Patch Management
  hosts: localhost
  become: yes
  tasks:
    # Task 5: Check for available updates
    - name: Check for available updates
      apt:
        update_cache: yes
        list: yes

    # Task 6: Download and apply patches
    - name: Download and apply patches
      apt:
        name: "{{ item }}"
        state: latest
      with_items:
        - linux-generic
        - linux-headers-generic
        - linux-image-generic
      become: yes

- name: Configuration Management
  hosts: localhost
  become: yes
  tasks:
    # Task 7: Enforce secure configuration settings
    - name: Set secure SSH configuration
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      with_items:
        - { regexp: '^PermitRootLogin', line: 'PermitRootLogin no' }
        - { regexp: '^PasswordAuthentication', line: 'PasswordAuthentication no' }
        - { regexp: '^X11Forwarding', line: 'X11Forwarding no' }
      notify: restart sshd

  handlers:
    - name: restart sshd
      service: name=ssh state=restarted

- name: Continuous Compliance Monitoring
  hosts: localhost
  become: yes
  tasks:
    # Task 8: Monitor system configurations against security standards (example: CIS benchmarks)
    - name: Download and apply CIS benchmarks
      get_url:
        url: "https://example.com/cis-benchmarks-ubuntu.yml"
        dest: "/etc/ansible/cis-benchmarks-ubuntu.yml"

    - name: Apply CIS benchmarks
      include_vars: "/etc/ansible/cis-benchmarks-ubuntu.yml"

- name: Secure Software Deployment
  hosts: localhost
  become: yes
  tasks:
    # Task 9: Automate deployment of software updates and patches (example: Nginx)
    - name: Install Nginx
      apt:
        name: nginx
        state: present
      become: yes
